#!/usr/bin/env python

######## created by Minghan
# This is to collect image depth data from CARLA 0.9.x platform with envrionment vehicles spawned.


# Copyright (c) 2019 Computer Vision Center (CVC) at the Universitat Autonoma de
# Barcelona (UAB).
#
# This work is licensed under the terms of the MIT license.
# For a copy, see <https://opensource.org/licenses/MIT>.

import glob
import os
import sys

try:
    # sys.path.append(glob.glob('../carla/dist/carla-*%d.%d-%s.egg' % (
    #     sys.version_info.major,
    #     sys.version_info.minor,
    #     'win-amd64' if os.name == 'nt' else 'linux-x86_64'))[0])
    sys.path.append('/home/minghanz/Carla/PythonAPI/carla/dist/carla-0.9.7-py3.5-linux-x86_64.egg')
except IndexError:
    print("not imported")
    pass

import carla

import random
import time

import logging


SpawnActor = carla.command.SpawnActor
SetAutopilot = carla.command.SetAutopilot
FutureActor = carla.command.FutureActor

cc = carla.ColorConverter.LogarithmicDepth
ccd = carla.ColorConverter.Depth

dep_last_loc = carla.Location(x=0, z=0)
rgb_last_loc = carla.Location(x=0, z=0)


def spawn_vehicles(client, num_vehicles, autopilot=False):
    vehicles_list = []

    world = client.get_world()
    blueprints = world.get_blueprint_library().filter('vehicle')

    spawn_points = world.get_map().get_spawn_points()
    number_of_spawn_points = len(spawn_points)

    if num_vehicles < number_of_spawn_points:
        random.shuffle(spawn_points)
    elif num_vehicles > number_of_spawn_points:
        msg = 'requested %d vehicles, but could only find %d spawn points'
        logging.warning(msg, num_vehicles, number_of_spawn_points)
        num_vehicles = number_of_spawn_points

    batch = []
    for n, transform in enumerate(spawn_points):
        if n >= num_vehicles:
            break
        blueprint = random.choice(blueprints)
        if blueprint.has_attribute('color'):
            color = random.choice(blueprint.get_attribute('color').recommended_values)
            blueprint.set_attribute('color', color)
        if blueprint.has_attribute('driver_id'):
            driver_id = random.choice(blueprint.get_attribute('driver_id').recommended_values)
            blueprint.set_attribute('driver_id', driver_id)
        if autopilot:
            blueprint.set_attribute('role_name', 'autopilot')
            batch.append(SpawnActor(blueprint, transform).then(SetAutopilot(FutureActor, True)))
        else:
            batch.append(SpawnActor(blueprint, transform))

    for response in client.apply_batch_sync(batch):
        if response.error:
            logging.error(response.error)
        else:
            vehicles_list.append(response.actor_id)

    return vehicles_list

def set_cam_attributes(bp):
    bp.set_attribute('image_size_x', '640')
    bp.set_attribute('image_size_y', '192')
    bp.set_attribute('fov', '81.5')      ## equivalent to kitti (fx = 0.58 width, fx=721.5, w=1242, atan(0.5/0.58)*2=81.5)
    # bp.set_attribute('sensor_tick', '1.0')

def save_img(image, frame_intv, min_dist, mode):
    global dep_last_loc
    global rgb_last_loc
    if image.frame % frame_intv == 0:
        if mode == "dep":
            loc = image.transform.location
            if (loc.x - dep_last_loc.x)**2 + (loc.y - dep_last_loc.y)**2 + (loc.z - dep_last_loc.z)**2 >= min_dist:
                image.save_to_disk('/mnt/storage8t/minghanz/Datasets/CARLA/_out/dep/%06d.png' % image.frame, cc)
                dep_last_loc = loc
        elif mode == "rgb":
            loc = image.transform.location
            if (loc.x - rgb_last_loc.x)**2 + (loc.y - rgb_last_loc.y)**2 + (loc.z - rgb_last_loc.z)**2 >= min_dist:
                image.save_to_disk('/mnt/storage8t/minghanz/Datasets/CARLA/_out/rgb/%06d.png' % image.frame)
                rgb_last_loc = loc
        else:
            raise ValueError("mode {} not recognized".format(mode))


def main():

    logging.basicConfig(format='%(levelname)s: %(message)s', level=logging.INFO)

    actor_list = []
    cam_list = []
    vehicles_list = []
    # In this tutorial script, we are going to add a vehicle to the simulation
    # and let it drive in autopilot. We will also create a camera attached to
    # that vehicle, and save all the images generated by the camera to disk.

    try:
        # First of all, we need to create the client that will send the requests
        # to the simulator. Here we'll assume the simulator is accepting
        # requests in the localhost at port 2000.
        client = carla.Client('localhost', 2000)
        client.set_timeout(2.0)
        print(client.get_available_maps())

        world = client.get_world()
        settings = world.get_settings()
        settings.fixed_delta_seconds = 0.1
        world.apply_settings(settings)

        blueprint_library = world.get_blueprint_library()

        ## add self car
        bp = random.choice(blueprint_library.filter('vehicle'))
        if bp.has_attribute('color'):
            color = random.choice(bp.get_attribute('color').recommended_values)
            bp.set_attribute('color', color)
        transform = random.choice(world.get_map().get_spawn_points())
        vehicle = world.spawn_actor(bp, transform)
        vehicle.set_autopilot(True)

        actor_list.append(vehicle)
        print('created %s' % vehicle.type_id)

        # add cameras
        camera_bp = blueprint_library.find('sensor.camera.depth')
        set_cam_attributes(camera_bp)
        camera_transform = carla.Transform(carla.Location(x=1.5, z=1.65))       ## 1.65 is from KITTI https://www.mrt.kit.edu/z/publ/download/2013/GeigerAl2013IJRR.pdf 
        camera_dep = world.spawn_actor(camera_bp, camera_transform, attach_to=vehicle)
        cam_list.append(camera_dep)
        print('created %s' % camera_dep.type_id)

        camera_rgb_bp = blueprint_library.find('sensor.camera.rgb')
        set_cam_attributes(camera_rgb_bp)
        camera_transform = carla.Transform(carla.Location(x=1.5, z=1.65))
        camera_rgb = world.spawn_actor(camera_rgb_bp, camera_transform, attach_to=vehicle)
        cam_list.append(camera_rgb)
        print('created %s' % camera_rgb.type_id)

        # sensor callback
        camera_dep.listen(lambda image: save_img(image, 10, 1, "dep"))
        camera_rgb.listen(lambda image: save_img(image, 10, 1, "rgb"))

        vehicles_list = spawn_vehicles(client, 100, autopilot=False)


        time.sleep(60)

    finally:

        print('\ndestroying %d vehicles' % len(vehicles_list))
        client.apply_batch([carla.command.DestroyActor(x) for x in vehicles_list])

        print('destroying cameras')
        for actor in cam_list:
            actor.destroy()
        print('done.')

        print('destroying actors')
        for actor in actor_list:
            actor.destroy()
        print('done.')


if __name__ == '__main__':

    main()
